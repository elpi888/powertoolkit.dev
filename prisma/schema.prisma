// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// User model - Clerk is the source of truth for user identity.
// This table stores application-specific user data and relations.
model User {
    id            String    @id // ID comes from Clerk (Clerk User ID or externalId if mapped)
    name          String?
    email         String?   @unique // Synced from Clerk
    emailVerified DateTime? // Synced from Clerk. Represents when the email was verified.
    image         String?   // Synced from Clerk (avatar URL)

    // Application-specific relations
    chats         Chat[]
    files         File[]
    images        Image[]
    userFeatures  UserFeature[]
    workbenches   Workbench[]
}

// Obsolete NextAuth models (Account, Session, VerificationToken) are removed.
// These were previously necessary for NextAuth.js.
// Clerk now handles sessions and external account linking.

enum Visibility {
    public
    private
}

model Chat {
    id           String     @id @default(uuid())
    createdAt    DateTime   @default(now())
    title        String
    userId       String
    visibility   Visibility @default(private)
    parentChatId String?    // For branched chats
    workbenchId  String?    // Optional association with workbench
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    parentChat   Chat?      @relation("ChatBranch", fields: [parentChatId], references: [id], onDelete: Cascade)
    branches     Chat[]     @relation("ChatBranch")
    messages     Message[]
    stream       Stream[]
    workbench    Workbench? @relation(fields: [workbenchId], references: [id], onDelete: SetNull)
}

model Message {
    id          String       @id @default(uuid())
    chatId      String
    role        String
    parts       Json
    attachments Json[]
    modelId     String      @default("openai:gpt-4o") // For tracking which model generated the message
    createdAt   DateTime     @default(now())
    chat        Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model File {
    id          String   @id @default(uuid())
    userId      String
    name        String
    contentType String
    url         String
    createdAt   DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
    id          String   @id @default(uuid())
    userId      String
    contentType String
    url         String
    createdAt   DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stream {
    id        String   @id @default(uuid())
    chatId    String
    createdAt DateTime @default(now())
    chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

    @@index([chatId])
}

model Feature {
    id          String        @id @default(uuid())
    name        String        @unique
    description String?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    userFeatures UserFeature[]
}

model UserFeature {
    id        String   @id @default(uuid())
    userId    String
    featureId String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    feature   Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)

    @@unique([userId, featureId])
}

model Workbench {
    id           String   @id @default(uuid())
    name         String
    systemPrompt String   @db.Text
    toolkitIds   String[] // Array of toolkit IDs
    userId       String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    chats        Chat[]
}
